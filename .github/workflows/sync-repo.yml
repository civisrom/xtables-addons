name: Sync Xtables-Addons Repository

on:
  # Запуск по расписанию (еженедельно в понедельник в 3:00 UTC)
  schedule:
    - cron: '0 3 * * 1'
  
  # Возможность ручного запуска
  workflow_dispatch:
  
  # Опционально: запуск при push в ваш репозиторий (если нужно)
  # push:
  #   branches: [ master ]

jobs:
  sync-repo:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: master
      
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Setup Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
      
      - name: Add Codeberg repository as remote
        run: |
          git remote add codeberg https://codeberg.org/jengelh/xtables-addons.git
      
      - name: Fetch from Codeberg
        run: |
          git fetch codeberg
      
      - name: Check for changes
        id: check_changes
        run: |
          LATEST_CODEBERG_COMMIT=$(git rev-parse codeberg/master)
          LATEST_LOCAL_COMMIT=$(git rev-parse HEAD)
          
          if [ "$LATEST_CODEBERG_COMMIT" != "$LATEST_LOCAL_COMMIT" ]; then
            # Проверяем, есть ли реальные изменения в файлах
            git diff --quiet HEAD..codeberg/master
            if [ $? -ne 0 ]; then
              echo "changes_detected=true" >> $GITHUB_OUTPUT
              
              # Получаем информацию о новых коммитах для использования в сообщении
              COMMIT_COUNT=$(git rev-list --count HEAD..codeberg/master)
              LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s" codeberg/master)
              COMMIT_AUTHORS=$(git log --pretty=format:"%an" HEAD..codeberg/master | sort | uniq | tr '\n' ', ' | sed 's/,$//' | sed 's/,/, /g')
              
              echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
              echo "last_commit_msg=$LAST_COMMIT_MSG" >> $GITHUB_OUTPUT
              echo "commit_authors=$COMMIT_AUTHORS" >> $GITHUB_OUTPUT
            else
              echo "changes_detected=false" >> $GITHUB_OUTPUT
              echo "Commits are different but no file changes detected."
            fi
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            echo "Repositories are already in sync."
          fi
      
      - name: Sync changes
        if: steps.check_changes.outputs.changes_detected == 'true'
        run: |
          # Формируем информативное сообщение коммита
          if [ "${{ steps.check_changes.outputs.commit_count }}" -eq "1" ]; then
            COMMIT_MSG="Sync: ${{ steps.check_changes.outputs.last_commit_msg }}"
          else
            COMMIT_MSG="Sync: ${{ steps.check_changes.outputs.commit_count }} new commits from Codeberg by ${{ steps.check_changes.outputs.commit_authors }}"
          fi
          
          # Напрямую применяем изменения вместо использования временной ветки
          git merge --no-ff codeberg/master -m "$COMMIT_MSG"
          
          # Проверяем, был ли успешный мердж
          if [ $? -eq 0 ]; then
            echo "Successfully merged changes from Codeberg"
            git push origin master
          else
            echo "Merge conflict detected, attempting to resolve..."
            # Отменяем незавершенный мердж
            git merge --abort
            
            # Используем rebase с возможностью разрешения конфликтов
            git checkout -b temp-sync-branch
            git reset --hard codeberg/master
            
            # Формируем коммит с информацией о синхронизации
            git commit --allow-empty -m "$COMMIT_MSG"
            
            # Переключаемся на master и делаем принудительное обновление
            git checkout master
            git reset --hard temp-sync-branch
            git push --force origin master
          fi
      
      - name: Report sync status
        if: always()
        run: |
          if [ "${{ steps.check_changes.outputs.changes_detected }}" == "true" ]; then
            echo "✅ Repository successfully synchronized with ${{ steps.check_changes.outputs.commit_count }} new commits"
          else
            echo "ℹ️ No changes detected in the upstream repository"
          fi
